# -*- coding: utf-8 -*-
"""Depression Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17G0wXN2-ur_bBRKQPCBIBFppVf037ek9
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

SEED = 42
pd.set_option("display.max_columns", None)

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/data.csv', delimiter='\t')

removedFeatures = [f'Q{i}E' for i in range(1, 43)] # add feature 'Q1E' to 'Q42E' to be removed
removedFeatures.extend([f'Q{i}I' for i in range(1, 43)]) # add feature 'Q1E' to 'Q42E' to be removed
removedFeatures.extend([f'VCL{i}' for i in range(1, 17)]) # add feature 'VCL1' to 'VCL16' to be removed
removedFeatures.extend([ 'source', 'introelapse', 'testelapse', 'surveyelapse', 'engnat', 'hand', 'orientation',
    'voted', 'country', 'screensize', 'uniquenetworklocation','religion','major','urban'])
depression = df.drop(removedFeatures, axis=1)
depression.head()

removed_Question_featured=['Q2A','Q3A','Q5A','Q6A','Q7A','Q9A','Q10A','Q12A','Q13A','Q14A','Q15A','Q17A','Q18A','Q19A','Q20A','Q21A','Q23A','Q24A','Q25A','Q26A','Q27A','Q28A','Q30A','Q31A','Q32A','Q33A','Q35A','Q36A','Q37A','Q39A','Q41A']
depression=depression.drop(removed_Question_featured,axis=1)

depression.head()

depression.columns=['Q1','Q4','Q8','Q11','Q16','Q22','Q29','Q34','Q38','Q40','Q42','TIPI1','TIPI2',	'TIPI3'	,'TIPI4',	'TIPI5'	,'TIPI6'	,'TIPI7',	'TIPI8',	'TIPI9',	'TIPI10'	,'Education',	'Gender',	'Age'	,'Race',	'Married',	'Familysize']
depression.head()

depression.shape

# plt.figure(figsize=(10, 6))
# sns.heatmap(depression.isnull())

depression.isnull().sum()

depression['Education'] = depression['Education'].map({ 0: 1,  1: 1, 2: 2, 3: 3, 4: 4 })

def changeEducationTitle(title) -> str:
    if title == 0 or title == 1:
        return 'Less than high school'
    if title == 2:
        return 'High school'
    if title == 3:
        return 'University degree'
    if title == 4:
        return 'Graduate degree'
    return title


education_string = depression['Education'].apply(changeEducationTitle)


plt.figure(figsize=(10, 4))
sns.countplot(x=depression['Education'], hue=education_string)

depression['Gender'] = depression['Gender'].map({0: 2, 1: 1, 2: 2, 3: 3})

def changeGenderValue(value):
    if value == 1:
        return 'Male'
    if value == 2 or value == 0: # value = 0 means user didn't enter this value, we assume it's female as most records are
        return 'Female'
    return 'Other' # if 3 or 0 return other as value

gender = depression['Gender'].apply(changeGenderValue)

plt.figure(figsize=(8, 4))
sns.countplot(x = depression['Gender'], hue=gender)

depression['Race'] = depression['Race'].apply(lambda x: x/10)
depression['Race'].head()

def changeRaceValues(value)->str:
    if value == 1:
        return 'Asian'
    if value == 2:
        return 'Arab'
    if value == 3:
        return 'Black'
    if value == 4:
        return 'Indigenous Australian'
    if value == 5:
        return 'Native American'
    if value == 6:
        return 'White'
    if value == 7:
        return 'Other'

    return value

race = depression['Race'].apply(changeRaceValues)

display(depression['Race'].value_counts())

plt.figure(figsize=(8,4))
sns.countplot(x=depression['Race'], hue=race)

indexes = depression[depression['Familysize'] > 13].index

print(f'Depression size before: {depression.shape[0]}')
depression = depression.drop(indexes, axis=0)
print(f'Depression size after: {depression.shape[0]}')

plt.figure(figsize=(18, 5))
sns.countplot(x=depression['Familysize'])

age_indexes = depression[depression['Age'] > 65]['Age'].index

display(age_indexes) # figure out how many


print(f'Depression size before: {depression.shape[0]}')
depression.drop(age_indexes, axis=0, inplace=True)
print(f'Depression size after: {depression.shape[0]}')

def makeAgeGroup(value):
    if value <= 10:
        return 'Under 10'
    if  10 <= value <= 16:
        return 'Primary Children'
    if 17 <= value <= 21:
        return 'Secondary Children'
    if 21 <= value <= 35:
        return 'Adults'
    if 36 <= value <= 48:
        return 'Elder Adults'
    if value >= 49:
        return 'Older People'

age = depression['Age'].apply(makeAgeGroup)

plt.figure(figsize=(16, 4))
sns.countplot(x=depression['Age'], hue=age)

def makeAgeGroupFeature(value):
    if value <= 10:
        return 1
    if  10 <= value <= 16:
        return 2
    if 17 <= value <= 21:
        return 3
    if 21 <= value <= 35:
        return 4
    if 36 <= value <= 48:
        return 5
    if value >= 49:
        return 6

depression['Age_group'] = depression['Age'].apply(makeAgeGroupFeature)

depression.drop('Age', axis=1, inplace=True)
depression.head()

depression['Total_count']  = depression.sum(axis=1)
depression.head()

# depression[depression['Total_count']>89]['Total_count'].describe()

def buildTarget(value):
    if value <= 75:
        return 'Normal'
    if 75 < value <= 80:
        return 'Mild'
    if 80 < value <= 88:
        return 'Moderate'
    if 88 < value <= 96:
        return 'Severe'
    if value > 96:
        return 'Extremely Severe'


depression['Target'] = depression['Total_count'].apply(buildTarget)

depression.head()

plt.figure(figsize=(16, 4))
sns.countplot(x=depression['Target'])

target = depression['Target']
processed_data=depression['Total_count']
depression.drop(['Target', 'Total_count'], axis=1, inplace=True)

depression.head()

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(depression, target, test_size=.2,random_state=77)

print(f'x_train: {x_train.shape}, y_train: {y_train.shape}')
print(f'x_test: {x_test.shape}, y_test: {y_test.shape}')

from sklearn.preprocessing import StandardScaler, MinMaxScaler

scaler = MinMaxScaler()

x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

from sklearn.svm import SVC

svc_clf = SVC()

model=svc_clf.fit(x_train_scaled, y_train)

# from sklearn.model_selection import cross_val_score

#cross_score = cross_val_score(svc_clf, x_train_scaled, y_train,)
# print(f'Mean Score {np.mean(cross_score)}')

from sklearn.metrics import classification_report

y_pred_svc = svc_clf.predict(x_test_scaled)
print(classification_report(y_test, y_pred_svc))

svc_clf.score(x_test_scaled, y_pred_svc)

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

def pretty_confusion_matrix(y_test, y_pred, labels = ['Extreme', 'Severe','Moderate','Mild','Normal']):
    cm = confusion_matrix(y_test, y_pred)
    pred_labels = ['Predicted ' + i for i in labels]
    df = pd.DataFrame(cm, columns = pred_labels, index = labels)
    return df

results_plot = pretty_confusion_matrix(y_test, y_pred_svc,['Extreme', 'Severe','Moderate','Mild','Normal'])
results_plot

depression.head()

processed_data.head()

plt.style.use('seaborn')

processed_data.plot(figsize=(16,4))

import pickle

pickle.dump(model, open("model.pkl", "wb"))

# Commented out IPython magic to ensure Python compatibility.
# %pip install gradio
import gradio as gr

def make_prediction(Q1	,Q4	,Q8	,Q11	,Q16	,Q22	,Q29,	Q34	,Q38	,Q40	,Q42,TIPI1	,TIPI2	,TIPI3	,TIPI4	,TIPI5	,TIPI6	,TIPI7,	TIPI8	,TIPI9	,TIPI10	,education	,gender	,race	,married	,familysize	,age_group):
    model_working=pickle.load(open('model.pkl','rb'))
    predict=model_working.predict([[(Q1-1)/3	,(Q4-1)/3	,(Q8-1)/3	,(Q11-1)/3	,(Q16-1)/3	,(Q22-1)/3	,(Q29-1)/3,	(Q34-1)/3	,(Q38-1)/3	,(Q43-1)/3	,(Q42-1)/3,TIPI1	,TIPI2	,TIPI3	,TIPI4	,TIPI5	,TIPI6	,TIPI7,	TIPI8	,TIPI9	,TIPI10	,education	,gender	,race	,married	,familysize	,age_group]])
    return predict

app=gr.Interface(make_prediction,
                 inputs=[
                     gr.Number(label="I found myself getting upset by quite trivial things."),
                     gr.Number(label="I experienced breathing difficulty (eg, excessively rapid breathing, breathlessness in the absence of physical exertion)."),
                     gr.Number(label="I found it difficult to relax."),
                     gr.Number(label="I found myself getting upset rather easily."),
                     gr.Number(label="I felt that I had lost interest in just about everything."),
                     gr.Number(label="I found it hard to wind down."),
                     gr.Number(label="I found it hard to calm down after something upset me."),
                     gr.Number(label="I felt I was pretty worthless."),
                     gr.Number(label="I felt that life was meaningless."),
                     gr.Number(label="I was worried about situations in which I might panic and make a fool of myself."),
                     gr.Number(label="I found it difficult to work up the initiative to do things."),
                     gr.Number(label="Extraverted, enthusiastic."),
                     gr.Number(label="Critical, quarrelsome."),
                     gr.Number(label="Dependable, self-disciplined"),
                     gr.Number(label="Anxious, easily upset."),
                     gr.Number(label="Open to new experiences, complex."),
                     gr.Number(label="Reserved, quiet."),
                     gr.Number(label="Sympathetic, warm."),
                     gr.Number(label="Disorganized, careless."),
                     gr.Number(label="Calm, emotionally stable."),
                     gr.Number(label="Conventional, uncreative."),
                     gr.Number(label="Education"),
                     gr.Number(label="Gender"),
                     gr.Number(label="Race"),
                     gr.Number(label="Married"),
                     gr.Number(label="FamilySize"),
                     gr.Number(label="Age"),],
                     outputs=[gr.Text(label="Level of Depression")],)

app.launch(share=True)